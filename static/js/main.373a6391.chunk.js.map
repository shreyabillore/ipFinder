{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","ipData","setIpData","userLat","setLatPosition","userLong","setLongPosition","status","setStatus","countryData","setCountryData","userDate","setUserDate","userTime","setUserTime","url","process","useEffect","ipDataLoad","a","axios","get","response","console","log","data","ip","ok","error","geoLocationData","geoLocationUrl","responseGeodata","dateTime","DateTime","local","setZone","time_zone","toFormat","userPositionfinder","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","className","id","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","Marker","Popup","city","country_name","Card","style","width","height","padding","Img","variant","src","country_code","Body","fontSize","fontWeight","display","flexDirection","alignItems","Text","region_name","zip_code","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.373a6391.chunk.js","sourcesContent":["import './App.css';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Map } from 'leaflet';\nimport { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport {Card} from 'react-bootstrap'\nimport { DateTime } from \"luxon\";\n\n\n\n\nfunction App() {\n\n  const [ipData, setIpData] = useState()\n  const [userLat,setLatPosition] = useState()\n  const [userLong,setLongPosition] = useState()\n  const [status,setStatus] = useState()\n  const [countryData,setCountryData] = useState([])\n  const [userDate,setUserDate] = useState();\n  const [userTime,setUserTime] = useState();\n\n  const position = [51.505, -0.09]\n  const url = `https://geo.ipify.org/api/v2/country?apiKey=${process.env.REACT_APP_GEO_KEY}`\n\n  useEffect(() => ipDataLoad(), [])\n\n  const ipDataLoad = async () => {\n    const response = await axios.get(url);\n    console.log(response.data.ip)\n    if (response.ok) {\n     setIpData(response.data.ip)\n      \n    }\n    else {\n      console.error(\"Problem: \" + response.error)\n      setIpData(response.data.ip)\n      console.log(response.data)\n    }\n  }\n\n\nuseEffect(() => geoLocationData(), [ipData])\n\n\n\nconst geoLocationData = async() => {\n  const API_KEY = process.env.REACT_APP_API_KEY;\n  console.log(API_KEY)\n  const geoLocationUrl =`https://api.freegeoip.app/json/${ipData}?apikey=${process.env.REACT_APP_API_KEY}`;\nconst responseGeodata = await axios.get(geoLocationUrl)\n  console.log(responseGeodata.data) \n  setCountryData(responseGeodata.data)\n  console.log('data is',countryData)\n  let dateTime = DateTime.local().setZone(countryData.time_zone);\n  setUserDate(dateTime.toFormat(\"LLL dd, yyyy\"));\n  setUserTime(dateTime.toFormat(\"h:mm a\"));\n}\n\n  useEffect(()=> userPositionfinder(),[])\n  \n  const userPositionfinder = () => {\n    if (!navigator.geolocation) {\n      console.log('Geolocation is not supported by your browser');\n    } else {\n      setStatus('Locating...');\n      navigator.geolocation.getCurrentPosition((position) => {\n        // setStatus(null);\n        setLatPosition(position.coords.latitude);\n        console.log(userLat);\n        setLongPosition(position.coords.longitude);\n        console.log(userLong);\n      }, () => {\n        console.log('Unable to retrieve your location');\n      });\n    }\n  }  \n\n\n  return (\n    <div className=\"App\">\n    <h1>My Ip Address</h1>\n   <div className=\"grid-container\"> \n   <div className='item1' id=\"mapid\">\n{     userLong ?\n    <MapContainer center={[userLat,userLong]} zoom={13} scrollWheelZoom={false}>\n    <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={[userLat,userLong]}>\n      <Popup>\n      You Logged in on : {userDate} !! <br /> Your Local Time is : {userTime} <br/>\n      You are located at {countryData.city}, {countryData.country_name}\n      </Popup>\n    </Marker>\n  </MapContainer>\n    : <div>{status}</div> }\n   </div>\n<Card style={{ width:'25rem',height:'50rem',padding:'0px'}}>\n<Card.Img variant=\"top\" src={`https://www.countryflags.io/${countryData.country_code}/flat/64.png`}  style={{ width: '5rem' }} />\n  <Card.Body style={{fontSize:'15px',fontWeight:'bold', display:'flex',flexDirection:'column',alignItems:'flex-start'}}>\n  <Card.Text>{ipData ?`My IP is ${ipData} !!` : status}</Card.Text>\n    <Card.Text>City : {countryData.city}</Card.Text>\n    <Card.Text>Region : {countryData.region_name}</Card.Text>\n    <Card.Text>Country Code : {countryData.country_code}</Card.Text>\n    <Card.Text>Zip Code : {countryData.zip_code}</Card.Text>\n  </Card.Body>\n</Card>\n\n   </div>\n  </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}